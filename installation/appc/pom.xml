<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<parent>
		<groupId>org.openecomp.appc.deployment</groupId>
		<artifactId>installation</artifactId>
		<version>1.0.0-SNAPSHOT</version>
	</parent>

	<modelVersion>4.0.0</modelVersion>
	<packaging>pom</packaging>
	<groupId>org.openecomp.appc.deployment</groupId>
	<artifactId>installation-appc</artifactId>
	<version>1.0.0-SNAPSHOT</version>

	<name>Installation - APPC Docker</name>
	<description>Creates APPC Docker container on top of the SDNC Base Docker Image</description>

	<properties>
		<image.name>openecomp/appc-image</image.name>
		<appc.version>${project.version}</appc.version>
                <!--This version will be over-ridden by jenkins 
                    injecting the version.properties variable file during docker build-->
		<appc.docker.staging.version>1.0.0</appc.docker.staging.version>
		<maven.build.timestamp.format>yyyyMMdd'T'HHmmss</maven.build.timestamp.format>
	</properties>


	<build>
		<plugins>
			
			<!-- This is to add any extra scripts, sql dump files, properties files APPC may need even after inheriting from the sdnc base image -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<id>copy-dockerfile</id>
						<goals>
							<goal>copy-resources</goal>
						</goals><!-- here the phase you need -->
						<phase>validate</phase>
						<configuration>
							<outputDirectory>${basedir}/target/docker-stage</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/docker</directory>
									<includes>
										<include>Dockerfile</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>

					<execution>
						<id>copy-scripts</id>
						<goals>
							<goal>copy-resources</goal>
						</goals><!-- here the phase you need -->
						<phase>validate</phase>
						<configuration>
							<outputDirectory>${basedir}/target/docker-stage/opt/openecomp/appc/bin</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/scripts</directory>
									<includes>
										<include>*.sh</include>
									</includes>
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					
					<!-- Two commented execution tags below in case / when appc needs to add .dump mysql files or keystore files -->
					<!--<execution>
						<id>copy-data</id>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<phase>validate</phase>
						<configuration>
							<outputDirectory>${basedir}/target/docker-stage/opt/openecomp/sdnc/data</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources</directory>
									<includes>
										<include>*.dump</include>
									</includes>
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-keystores</id>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<phase>validate</phase>
						<configuration>
							<outputDirectory>${basedir}/target/docker-stage/opt/openecomp/sdnc/data/stores</outputDirectory>
							<resources>
								<resource>
									<directory>../src/main/stores</directory>
									<includes>
										<include>*.jks</include>
									</includes>
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>-->
					
					<execution>
						<id>copy-properties</id>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<phase>validate</phase>
						<configuration>
							<outputDirectory>${basedir}/target/docker-stage/opt/openecomp/appc/data/properties</outputDirectory>
							<resources>
								<resource>
									<directory>../src/main/appc-properties</directory>
									<includes>
										<include>*.properties</include>
									</includes>
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>exec-maven-plugin</artifactId>
				<groupId>org.codehaus.mojo</groupId>
				<version>1.5.0</version>
				<executions>
					<execution>
						<id>Get features</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>/bin/bash</executable>
							<environmentVariables>
								<APPC_VERSION>${appc.version}</APPC_VERSION>
								<APPC_OAM_VERSION>${project.version}</APPC_OAM_VERSION>
								<SDNC_OAM_VERSION>${project.version}</SDNC_OAM_VERSION>
							</environmentVariables>
							<arguments>
								<argument>${basedir}/src/main/scripts/installZips.sh</argument>
								<argument>${basedir}/target/docker-stage/opt/openecomp/appc</argument>
							</arguments>
						</configuration>
					</execution>

					<execution>
						<id>change shell permissions</id>
						<phase>process-sources</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>/usr/bin/find</executable>
							<arguments>
								<argument>${basedir}/target/docker-stage/opt/openecomp/appc</argument>
								<argument>-name</argument>
								<argument>*.sh</argument>
								<argument>-exec</argument>
								<argument>chmod</argument>
								<argument>+x</argument>
								<argument>{}</argument>
								<argument>;</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>docker</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.groovy.maven</groupId>
						<artifactId>gmaven-plugin</artifactId>
						<executions>
							<execution>
								<phase>validate</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<properties>
										<ver>${project.version}</ver>
										<timestamp>${maven.build.timestamp}</timestamp>
									</properties>
									<source>
										println project.properties['ver'];
										def versionArray;
										if ( project.properties['ver'] != null ) {
										versionArray = project.properties['ver'].split('\\.');
										}
										if ( project.properties['ver'].endsWith("-SNAPSHOT") ) {
										project.properties['dockertag1']=project.properties['ver'] + "-latest";
										project.properties['dockertag2']="latest";
										} else {
										project.properties['dockertag1']=versionArray[0] + '.' + versionArray[1] + "-STAGING-latest";
										project.properties['dockertag2']=project.properties['ver'] + "-STAGING-" + project.properties['timestamp'];
										}
										println 'docker tag 1: ' + project.properties['dockertag1'];
										println 'docker tag 2: ' + project.properties['dockertag2'];
									</source>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>0.16.5</version>
						<inherited>false</inherited>
						<configuration>
							<images>
								<image>
									<name>${image.name}</name>
									<build>
										<cleanup>try</cleanup>
										<dockerFileDir>${basedir}/target/docker-stage</dockerFileDir>
										<dockerFile>${basedir}/target/docker-stage/Dockerfile</dockerFile>
										<tags>
											<tag>${dockertag1}</tag>
										</tags>
									</build>
								</image>
							</images>
						</configuration>
						<executions>
							<execution>
								<id>generate-images</id>
								<phase>package</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>

							<execution>
								<id>push-images</id>
								<phase>deploy</phase>
								<goals>
									<goal>build</goal>
									<goal>push</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!-- This is to add any extra scripts, sql dump files, properties files 
						APPC may need even after inheriting from the sdnc base image -->
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>2.6</version>
						<executions>
							<execution>
								<id>copy-dockerfile</id>
								<goals>
									<goal>copy-resources</goal>
								</goals><!-- here the phase you need -->
								<phase>validate</phase>
								<configuration>
									<outputDirectory>${basedir}/target/docker-stage</outputDirectory>
									<resources>
										<resource>
											<directory>src/main/docker</directory>
											<includes>
												<include>Dockerfile</include>
											</includes>
											<filtering>true</filtering>
										</resource>
									</resources>
								</configuration>
							</execution>

							<execution>
								<id>copy-scripts</id>
								<goals>
									<goal>copy-resources</goal>
								</goals><!-- here the phase you need -->
								<phase>validate</phase>
								<configuration>
									<outputDirectory>${basedir}/target/docker-stage/opt/openecomp/appc/bin</outputDirectory>
									<resources>
										<resource>
											<directory>src/main/scripts</directory>
											<includes>
												<include>*.sh</include>
											</includes>
											<filtering>false</filtering>
										</resource>
									</resources>
								</configuration>
							</execution>

							<!-- Two commented execution tags below in case / when appc needs 
								to add .dump mysql files or keystore files -->
							<!--<execution> <id>copy-data</id> <goals> <goal>copy-resources</goal> 
								</goals> <phase>validate</phase> <configuration> <outputDirectory>${basedir}/target/docker-stage/opt/openecomp/sdnc/data</outputDirectory> 
								<resources> <resource> <directory>src/main/resources</directory> <includes> 
								<include>*.dump</include> </includes> <filtering>false</filtering> </resource> 
								</resources> </configuration> </execution> <execution> <id>copy-keystores</id> 
								<goals> <goal>copy-resources</goal> </goals> <phase>validate</phase> <configuration> 
								<outputDirectory>${basedir}/target/docker-stage/opt/openecomp/sdnc/data/stores</outputDirectory> 
								<resources> <resource> <directory>../src/main/stores</directory> <includes> 
								<include>*.jks</include> </includes> <filtering>false</filtering> </resource> 
								</resources> </configuration> </execution> -->

							<execution>
								<id>copy-properties</id>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<phase>validate</phase>
								<configuration>
									<outputDirectory>${basedir}/target/docker-stage/opt/openecomp/appc/data/properties</outputDirectory>
									<resources>
										<resource>
											<directory>../src/main/appc-properties</directory>
											<includes>
												<include>*.properties</include>
											</includes>
											<filtering>false</filtering>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>exec-maven-plugin</artifactId>
						<groupId>org.codehaus.mojo</groupId>
						<version>1.5.0</version>
						<executions>
							<execution>
								<id>Get features</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>/bin/bash</executable>
									<environmentVariables>
										<APPC_VERSION>${appc.version}</APPC_VERSION>
										<APPC_OAM_VERSION>${project.version}</APPC_OAM_VERSION>
										<SDNC_OAM_VERSION>${project.version}</SDNC_OAM_VERSION>
									</environmentVariables>
									<arguments>
										<argument>${basedir}/src/main/scripts/installZips.sh</argument>
										<argument>${basedir}/target/docker-stage/opt/openecomp/appc</argument>
									</arguments>
								</configuration>
							</execution>

							<execution>
								<id>change shell permissions</id>
								<phase>process-sources</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>/usr/bin/find</executable>
									<arguments>
										<argument>${basedir}/target/docker-stage/opt/openecomp/appc</argument>
										<argument>-name</argument>
										<argument>*.sh</argument>
										<argument>-exec</argument>
										<argument>chmod</argument>
										<argument>+x</argument>
										<argument>{}</argument>
										<argument>;</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>

		</profile>
	</profiles>
	
	<organization>
		<name>openECOMP</name>
	</organization>
	
</project>
